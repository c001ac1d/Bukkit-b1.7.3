diff --git a/original/NetworkManager.java b/modified/NetworkManager.java
index ffc10ee6..11cf7db8 100644
--- a/original/NetworkManager.java
+++ b/modified/NetworkManager.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import java.io.BufferedOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
-import java.io.IOException;
 import java.net.Socket;
 import java.net.SocketAddress;
 import java.net.SocketException;
@@ -17,7 +16,7 @@ public class NetworkManager {
     public static int b;
     public static int c;
     private Object g = new Object();
-    private Socket socket;
+    public Socket socket; // CraftBukkit - private -> public
     private final SocketAddress i;
     private DataInputStream input;
     private DataOutputStream output;
@@ -39,20 +38,31 @@ public class NetworkManager {
     public int f = 0;
     private int lowPriorityQueueDelay = 50;
 
-    public NetworkManager(Socket socket, String s, NetHandler nethandler) throws IOException {
+    public NetworkManager(Socket socket, String s, NetHandler nethandler) {
         this.socket = socket;
         this.i = socket.getRemoteSocketAddress();
         this.p = nethandler;
 
+        // CraftBukkit start - IPv6 stack in Java on BSD/OSX doesn't support setTrafficClass
         try {
-            socket.setSoTimeout(30000);
             socket.setTrafficClass(24);
-        } catch (SocketException socketexception) {
+        } catch (SocketException e) {}
+        // CraftBukkit end
+
+        try {
+            // CraftBukkit start - cant compile these outside the try
+            socket.setSoTimeout(30000);
+            this.input = new DataInputStream(socket.getInputStream());
+            this.output = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream(), 5120));
+        } catch (java.io.IOException socketexception) {
+            // CraftBukkit end
             System.err.println(socketexception.getMessage());
         }
 
+        /* CraftBukkit start - moved up
         this.input = new DataInputStream(socket.getInputStream());
         this.output = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream(), 5120));
+        // CraftBukkit end */
         this.s = new NetworkReaderThread(this, s + " read thread");
         this.r = new NetworkWriterThread(this, s + " write thread");
         this.s.start();
@@ -101,7 +111,8 @@ public class NetworkManager {
                 flag = true;
             }
 
-            if (this.lowPriorityQueueDelay-- <= 0 && !this.lowPriorityQueue.isEmpty() && (this.f == 0 || System.currentTimeMillis() - ((Packet) this.lowPriorityQueue.get(0)).timestamp >= (long) this.f)) {
+            // CraftBukkit - don't allow low priority packet to be sent unless it was placed in the queue before the first packet on the high priority queue
+            if ((flag || this.lowPriorityQueueDelay-- <= 0) && !this.lowPriorityQueue.isEmpty() && (this.highPriorityQueue.isEmpty() || ((Packet) this.highPriorityQueue.get(0)).timestamp > ((Packet) this.lowPriorityQueue.get(0)).timestamp)) {
                 object = this.g;
                 synchronized (this.g) {
                     packet = (Packet) this.lowPriorityQueue.remove(0);
