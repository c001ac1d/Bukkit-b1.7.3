diff --git a/original/WorldServer.java b/modified/WorldServer.java
index 36c098ea..2005a9bc 100644
--- a/original/WorldServer.java
+++ b/modified/WorldServer.java
@@ -3,23 +3,46 @@ package net.minecraft.server;
 import java.util.ArrayList;
 import java.util.List;
 
-public class WorldServer extends World {
+// CraftBukkit start
+import org.bukkit.BlockChangeDelegate;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
+import org.bukkit.craftbukkit.generator.InternalChunkGenerator;
+import org.bukkit.craftbukkit.generator.NetherChunkGenerator;
+import org.bukkit.craftbukkit.generator.NormalChunkGenerator;
+import org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator;
+import org.bukkit.event.weather.LightningStrikeEvent;
+
+public class WorldServer extends World implements BlockChangeDelegate {
+    // CraftBukkit end
 
     public ChunkProviderServer chunkProviderServer;
     public boolean weirdIsOpCache = false;
     public boolean canSave;
-    private MinecraftServer server;
+    public final MinecraftServer server; // CraftBukkit - private -> public final
     private EntityList G = new EntityList();
 
-    public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, String s, int i, long j) {
-        super(idatamanager, s, j, WorldProvider.byDimension(i));
+    // CraftBukkit start - change signature
+    public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, String s, int i, long j, org.bukkit.World.Environment env, ChunkGenerator gen) {
+        super(idatamanager, s, j, WorldProvider.byDimension(env.getId()), gen, env);
         this.server = minecraftserver;
+
+        this.dimension = i;
+        this.pvpMode = minecraftserver.pvpMode;
+        this.manager = new PlayerManager(minecraftserver, this.dimension, minecraftserver.propertyManager.getInt("view-distance", 10));
     }
 
+    public final int dimension;
+    public EntityTracker tracker;
+    public PlayerManager manager;
+    // CraftBukkit end
+
     public void entityJoinedWorld(Entity entity, boolean flag) {
+        /* CraftBukkit start - We prevent spawning in general, so this butchering is not needed
         if (!this.server.spawnAnimals && (entity instanceof EntityAnimal || entity instanceof EntityWaterAnimal)) {
             entity.die();
         }
+        // CraftBukkit end */
 
         if (entity.passenger == null || !(entity.passenger instanceof EntityHuman)) {
             super.entityJoinedWorld(entity, flag);
@@ -33,7 +56,22 @@ public class WorldServer extends World {
     protected IChunkProvider b() {
         IChunkLoader ichunkloader = this.w.a(this.worldProvider);
 
-        this.chunkProviderServer = new ChunkProviderServer(this, ichunkloader, this.worldProvider.getChunkProvider());
+        // CraftBukkit start
+        InternalChunkGenerator gen;
+
+        if (this.generator != null) {
+            gen = new CustomChunkGenerator(this, this.getSeed(), this.generator);
+        } else if (this.worldProvider instanceof WorldProviderHell) {
+            gen = new NetherChunkGenerator(this, this.getSeed());
+        } else if (this.worldProvider instanceof WorldProviderSky) {
+            gen = new SkyLandsChunkGenerator(this, this.getSeed());
+        } else {
+            gen = new NormalChunkGenerator(this, this.getSeed());
+        }
+
+        this.chunkProviderServer = new ChunkProviderServer(this, ichunkloader, gen);
+        // CraftBukkit end
+
         return this.chunkProviderServer;
     }
 
@@ -59,7 +97,8 @@ public class WorldServer extends World {
             i1 = l;
         }
 
-        return i1 > 16 || this.server.serverConfigurationManager.isOp(entityhuman.name);
+        // CraftBukkit - Configurable spawn protection
+        return i1 > this.getServer().getSpawnRadius() || this.server.serverConfigurationManager.isOp(entityhuman.name);
     }
 
     protected void c(Entity entity) {
@@ -77,8 +116,17 @@ public class WorldServer extends World {
     }
 
     public boolean strikeLightning(Entity entity) {
+        // CraftBukkit start
+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) entity.getBukkitEntity());
+        this.getServer().getPluginManager().callEvent(lightning);
+
+        if (lightning.isCancelled()) {
+            return false;
+        }
+
         if (super.strikeLightning(entity)) {
-            this.server.serverConfigurationManager.sendPacketNearby(entity.locX, entity.locY, entity.locZ, 512.0D, this.worldProvider.dimension, new Packet71Weather(entity));
+            this.server.serverConfigurationManager.sendPacketNearby(entity.locX, entity.locY, entity.locZ, 512.0D, this.dimension, new Packet71Weather(entity));
+            // CraftBukkit end
             return true;
         } else {
             return false;
@@ -88,22 +136,32 @@ public class WorldServer extends World {
     public void a(Entity entity, byte b0) {
         Packet38EntityStatus packet38entitystatus = new Packet38EntityStatus(entity.id, b0);
 
-        this.server.getTracker(this.worldProvider.dimension).sendPacketToEntity(entity, packet38entitystatus);
+        // CraftBukkit
+        this.server.getTracker(this.dimension).sendPacketToEntity(entity, packet38entitystatus);
     }
 
     public Explosion createExplosion(Entity entity, double d0, double d1, double d2, float f, boolean flag) {
-        Explosion explosion = new Explosion(this, entity, d0, d1, d2, f);
+        // CraftBukkit start
+        Explosion explosion = super.createExplosion(entity, d0, d1, d2, f, flag);
+
+        if (explosion.wasCanceled) {
+            return explosion;
+        }
 
+        /* Remove
         explosion.a = flag;
         explosion.a();
         explosion.a(false);
-        this.server.serverConfigurationManager.sendPacketNearby(d0, d1, d2, 64.0D, this.worldProvider.dimension, new Packet60Explosion(d0, d1, d2, f, explosion.blocks));
+        */
+        this.server.serverConfigurationManager.sendPacketNearby(d0, d1, d2, 64.0D, this.dimension, new Packet60Explosion(d0, d1, d2, f, explosion.blocks));
+        // CraftBukkit end
         return explosion;
     }
 
     public void playNote(int i, int j, int k, int l, int i1) {
         super.playNote(i, j, k, l, i1);
-        this.server.serverConfigurationManager.sendPacketNearby((double) i, (double) j, (double) k, 64.0D, this.worldProvider.dimension, new Packet54PlayNoteBlock(i, j, k, l, i1));
+        // CraftBukkit
+        this.server.serverConfigurationManager.sendPacketNearby((double) i, (double) j, (double) k, 64.0D, this.dimension, new Packet54PlayNoteBlock(i, j, k, l, i1));
     }
 
     public void saveLevel() {
@@ -115,11 +173,13 @@ public class WorldServer extends World {
 
         super.i();
         if (flag != this.v()) {
-            if (flag) {
-                this.server.serverConfigurationManager.sendAll(new Packet70Bed(2));
-            } else {
-                this.server.serverConfigurationManager.sendAll(new Packet70Bed(1));
+            // CraftBukkit start - only sending weather packets to those affected
+            for (int i = 0; i < this.players.size(); ++i) {
+                if (((EntityPlayer) this.players.get(i)).world == this) {
+                    ((EntityPlayer) this.players.get(i)).netServerHandler.sendPacket(new Packet70Bed(flag ? 2 : 1));
+                }
             }
+            // CraftBukkit end
         }
     }
 }
