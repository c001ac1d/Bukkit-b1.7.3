diff --git a/original/ChunkProviderServer.java b/modified/ChunkProviderServer.java
index 05eeccfa..0b232fd1 100644
--- a/original/ChunkProviderServer.java
+++ b/modified/ChunkProviderServer.java
@@ -8,16 +8,29 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+// CraftBukkit start
+import java.util.Random;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.util.LongHashset;
+import org.bukkit.craftbukkit.util.LongHashtable;
+import org.bukkit.event.world.ChunkLoadEvent;
+import org.bukkit.event.world.ChunkPopulateEvent;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.bukkit.generator.BlockPopulator;
+// CraftBukkit end
+
 public class ChunkProviderServer implements IChunkProvider {
 
-    private Set unloadQueue = new HashSet();
-    private Chunk emptyChunk;
-    private IChunkProvider chunkProvider;
+    // CraftBukkit start
+    public LongHashset unloadQueue = new LongHashset();
+    public Chunk emptyChunk;
+    public IChunkProvider chunkProvider; // CraftBukkit
     private IChunkLoader e;
     public boolean forceChunkLoad = false;
-    private Map chunks = new HashMap();
-    private List chunkList = new ArrayList();
-    private WorldServer world;
+    public LongHashtable<Chunk> chunks = new LongHashtable<Chunk>();
+    public List chunkList = new ArrayList();
+    public WorldServer world;
+    // CraftBukkit end
 
     public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
         this.emptyChunk = new EmptyChunk(worldserver, new byte['\u8000'], 0, 0);
@@ -27,7 +40,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public boolean isChunkLoaded(int i, int j) {
-        return this.chunks.containsKey(Integer.valueOf(ChunkCoordIntPair.a(i, j)));
+        return this.chunks.containsKey(i, j); // CraftBukkit
     }
 
     public void queueUnload(int i, int j) {
@@ -36,16 +49,17 @@ public class ChunkProviderServer implements IChunkProvider {
         int l = j * 16 + 8 - chunkcoordinates.z;
         short short1 = 128;
 
-        if (k < -short1 || k > short1 || l < -short1 || l > short1) {
-            this.unloadQueue.add(Integer.valueOf(ChunkCoordIntPair.a(i, j)));
+        if (k < -short1 || k > short1 || l < -short1 || l > short1 || !(this.world.keepSpawnInMemory)) { // CraftBukkit - added 'this.world.keepSpawnInMemory'
+            this.unloadQueue.add(i, j); // CraftBukkit
         }
     }
 
     public Chunk getChunkAt(int i, int j) {
-        int k = ChunkCoordIntPair.a(i, j);
-
-        this.unloadQueue.remove(Integer.valueOf(k));
-        Chunk chunk = (Chunk) this.chunks.get(Integer.valueOf(k));
+        // CraftBukkit start
+        this.unloadQueue.remove(i, j);
+        Chunk chunk = (Chunk) this.chunks.get(i, j);
+        boolean newChunk = false;
+        // CraftBukkit end
 
         if (chunk == null) {
             chunk = this.loadChunk(i, j);
@@ -55,15 +69,28 @@ public class ChunkProviderServer implements IChunkProvider {
                 } else {
                     chunk = this.chunkProvider.getOrCreateChunk(i, j);
                 }
+                newChunk = true; // CraftBukkit
             }
 
-            this.chunks.put(Integer.valueOf(k), chunk);
+            this.chunks.put(i, j, chunk); // CraftBukkit
             this.chunkList.add(chunk);
             if (chunk != null) {
                 chunk.loadNOP();
                 chunk.addEntities();
             }
 
+            // CraftBukkit start
+            org.bukkit.Server server = this.world.getServer();
+            if (server != null) {
+                /*
+                 * If it's a new world, the first few chunks are generated inside
+                 * the World constructor. We can't reliably alter that, so we have
+                 * no way of creating a CraftWorld/CraftServer at that point.
+                 */
+                server.getPluginManager().callEvent(new ChunkLoadEvent(chunk.bukkitChunk, newChunk));
+            }
+            // CraftBukkit end
+
             if (!chunk.done && this.isChunkLoaded(i + 1, j + 1) && this.isChunkLoaded(i, j + 1) && this.isChunkLoaded(i + 1, j)) {
                 this.getChunkAt(this, i, j);
             }
@@ -85,12 +112,23 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public Chunk getOrCreateChunk(int i, int j) {
-        Chunk chunk = (Chunk) this.chunks.get(Integer.valueOf(ChunkCoordIntPair.a(i, j)));
-
-        return chunk == null ? (!this.world.isLoading && !this.forceChunkLoad ? this.emptyChunk : this.getChunkAt(i, j)) : chunk;
+        // CraftBukkit start
+        Chunk chunk = (Chunk) this.chunks.get(i, j);
+
+        chunk = chunk == null ? (!this.world.isLoading && !this.forceChunkLoad ? this.emptyChunk : this.getChunkAt(i, j)) : chunk;
+        if (chunk == this.emptyChunk) return chunk;
+        if (i != chunk.x || j != chunk.z) {
+            MinecraftServer.log.info("Chunk (" + chunk.x + ", " + chunk.z + ") stored at  (" + i + ", " + j + ")");
+            MinecraftServer.log.info(chunk.getClass().getName());
+            Throwable ex = new Throwable();
+            ex.fillInStackTrace();
+            ex.printStackTrace();
+        }
+        return chunk;
+        // CraftBukkit end
     }
 
-    private Chunk loadChunk(int i, int j) {
+    public Chunk loadChunk(int i, int j) { // CraftBukkit - private -> public
         if (this.e == null) {
             return null;
         } else {
@@ -109,7 +147,7 @@ public class ChunkProviderServer implements IChunkProvider {
         }
     }
 
-    private void saveChunkNOP(Chunk chunk) {
+    public void saveChunkNOP(Chunk chunk) { // CraftBukkit - private -> public
         if (this.e != null) {
             try {
                 this.e.b(this.world, chunk);
@@ -119,12 +157,12 @@ public class ChunkProviderServer implements IChunkProvider {
         }
     }
 
-    private void saveChunk(Chunk chunk) {
+    public void saveChunk(Chunk chunk) { // CraftBukkit - private -> public
         if (this.e != null) {
             try {
                 chunk.r = this.world.getTime();
                 this.e.a(this.world, chunk);
-            } catch (IOException ioexception) {
+            } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
                 ioexception.printStackTrace();
             }
         }
@@ -137,6 +175,25 @@ public class ChunkProviderServer implements IChunkProvider {
             chunk.done = true;
             if (this.chunkProvider != null) {
                 this.chunkProvider.getChunkAt(ichunkprovider, i, j);
+
+                // CraftBukkit start
+                BlockSand.instaFall = true;
+                Random random = new Random();
+                random.setSeed(world.getSeed());
+                long xRand = random.nextLong() / 2L * 2L + 1L;
+                long zRand = random.nextLong() / 2L * 2L + 1L;
+                random.setSeed((long) i * xRand + (long) j * zRand ^ world.getSeed());
+
+                org.bukkit.World world = this.world.getWorld();
+                if (world != null) {
+                    for (BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, chunk.bukkitChunk);
+                    }
+                }
+                BlockSand.instaFall = false;
+                this.world.getServer().getPluginManager().callEvent(new ChunkPopulateEvent(chunk.bukkitChunk));
+                // CraftBukkit end
+
                 chunk.f();
             }
         }
@@ -175,19 +232,27 @@ public class ChunkProviderServer implements IChunkProvider {
 
     public boolean unloadChunks() {
         if (!this.world.canSave) {
-            for (int i = 0; i < 100; ++i) {
-                if (!this.unloadQueue.isEmpty()) {
-                    Integer integer = (Integer) this.unloadQueue.iterator().next();
-                    Chunk chunk = (Chunk) this.chunks.get(integer);
+            // CraftBukkit start
+            org.bukkit.Server server = this.world.getServer();
+            for (int i = 0; i < 50 && !this.unloadQueue.isEmpty(); i++) {
+                long chunkcoordinates = this.unloadQueue.popFirst();
+                Chunk chunk = this.chunks.get(chunkcoordinates);
+                if (chunk == null) continue;
+
+                ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk);
+                server.getPluginManager().callEvent(event);
+                if (!event.isCancelled()) {
+                    this.world.getWorld().preserveChunk((CraftChunk) chunk.bukkitChunk);
 
                     chunk.removeEntities();
                     this.saveChunk(chunk);
                     this.saveChunkNOP(chunk);
-                    this.unloadQueue.remove(integer);
-                    this.chunks.remove(integer);
+                    // this.unloadQueue.remove(integer);
+                    this.chunks.remove(chunkcoordinates); // CraftBukkit
                     this.chunkList.remove(chunk);
                 }
             }
+            // CraftBukkit end
 
             if (this.e != null) {
                 this.e.a();
