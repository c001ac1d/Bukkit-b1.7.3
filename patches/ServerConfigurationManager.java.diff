diff --git a/original/ServerConfigurationManager.java b/modified/ServerConfigurationManager.java
index 44c81277..981f058a 100644
--- a/original/ServerConfigurationManager.java
+++ b/modified/ServerConfigurationManager.java
@@ -12,25 +12,47 @@ import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.command.ColouredConsoleSender;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerLoginEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.Bukkit;
+// CraftBukkit end
+
 public class ServerConfigurationManager {
 
     public static Logger a = Logger.getLogger("Minecraft");
     public List players = new ArrayList();
-    private MinecraftServer server;
-    private PlayerManager[] d = new PlayerManager[2];
-    private int maxPlayers;
-    private Set banByName = new HashSet();
-    private Set banByIP = new HashSet();
+    public MinecraftServer server; // CraftBukkit - private -> public
+    // private PlayerManager[] d = new PlayerManager[2]; // CraftBukkit - removed
+    public int maxPlayers; // CraftBukkit - private -> public
+    public Set banByName = new HashSet(); // CraftBukkit - private -> public
+    public Set banByIP = new HashSet(); // CraftBukkit - private -> public
     private Set h = new HashSet();
     private Set i = new HashSet();
     private File j;
     private File k;
     private File l;
     private File m;
-    private PlayerFileData playerFileData;
-    private boolean o;
+    public PlayerFileData playerFileData; // CraftBukkit - private - >public
+    public boolean o; // Craftbukkit - private -> public
+
+    // CraftBukkit start
+    private CraftServer cserver;
 
     public ServerConfigurationManager(MinecraftServer minecraftserver) {
+        minecraftserver.server = new CraftServer(minecraftserver, this);
+        minecraftserver.console = new ColouredConsoleSender(minecraftserver.server);
+        this.cserver = minecraftserver.server;
+        // CraftBukkit end
+
         this.server = minecraftserver;
         this.j = minecraftserver.a("banned-players.txt");
         this.k = minecraftserver.a("banned-ips.txt");
@@ -38,8 +60,7 @@ public class ServerConfigurationManager {
         this.m = minecraftserver.a("white-list.txt");
         int i = minecraftserver.propertyManager.getInt("view-distance", 10);
 
-        this.d[0] = new PlayerManager(minecraftserver, 0, i);
-        this.d[1] = new PlayerManager(minecraftserver, -1, i);
+        // CraftBukkit - removed playermanagers
         this.maxPlayers = minecraftserver.propertyManager.getInt("max-players", 20);
         this.o = minecraftserver.propertyManager.getBoolean("white-list", false);
         this.g();
@@ -53,12 +74,18 @@ public class ServerConfigurationManager {
     }
 
     public void setPlayerFileData(WorldServer[] aworldserver) {
+        if (this.playerFileData != null) return; // CraftBukkit
         this.playerFileData = aworldserver[0].p().d();
     }
 
     public void a(EntityPlayer entityplayer) {
-        this.d[0].removePlayer(entityplayer);
-        this.d[1].removePlayer(entityplayer);
+        // CraftBukkit - removed playermanagers
+        for (WorldServer world : this.server.worlds) {
+            if (world.manager.managedPlayers.contains(entityplayer)) {
+                world.manager.removePlayer(entityplayer);
+                break;
+            }
+        }
         this.getPlayerManager(entityplayer.dimension).addPlayer(entityplayer);
         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
 
@@ -66,11 +93,16 @@ public class ServerConfigurationManager {
     }
 
     public int a() {
-        return this.d[0].getFurthestViewableBlock();
+        // CraftBukkit start
+        if (this.server.worlds.size() == 0) {
+            return this.server.propertyManager.getInt("view-distance", 10) * 16 - 16;
+        }
+        return this.server.worlds.get(0).manager.getFurthestViewableBlock();
+        // CraftBukkit end
     }
 
     private PlayerManager getPlayerManager(int i) {
-        return i == -1 ? this.d[1] : this.d[0];
+        return this.server.getWorldServer(i).manager; // CraftBukkit
     }
 
     public void b(EntityPlayer entityplayer) {
@@ -87,6 +119,17 @@ public class ServerConfigurationManager {
             entityplayer.setPosition(entityplayer.locX, entityplayer.locY + 1.0D, entityplayer.locZ);
         }
 
+        // CraftBukkit start
+        PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(this.cserver.getPlayer(entityplayer), "\u00A7e" + entityplayer.name + " joined the game.");
+        this.cserver.getPluginManager().callEvent(playerJoinEvent);
+
+        String joinMessage = playerJoinEvent.getJoinMessage();
+
+        if (joinMessage != null) {
+            this.server.serverConfigurationManager.sendAll(new Packet3Chat(joinMessage));
+        }
+        // CraftBukkit end
+
         worldserver.addEntity(entityplayer);
         this.getPlayerManager(entityplayer.dimension).addPlayer(entityplayer);
     }
@@ -95,70 +138,116 @@ public class ServerConfigurationManager {
         this.getPlayerManager(entityplayer.dimension).movePlayer(entityplayer);
     }
 
-    public void disconnect(EntityPlayer entityplayer) {
+    public String disconnect(EntityPlayer entityplayer) { // CraftBukkit - changed return type
+        // CraftBukkit start
+        // Quitting must be before we do final save of data, in case plugins need to modify it
+        this.getPlayerManager(entityplayer.dimension).removePlayer(entityplayer);
+        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(this.cserver.getPlayer(entityplayer), "\u00A7e" + entityplayer.name + " left the game.");
+        this.cserver.getPluginManager().callEvent(playerQuitEvent);
+        // CraftBukkit end
+
         this.playerFileData.a(entityplayer);
         this.server.getWorldServer(entityplayer.dimension).kill(entityplayer);
         this.players.remove(entityplayer);
         this.getPlayerManager(entityplayer.dimension).removePlayer(entityplayer);
+
+        return playerQuitEvent.getQuitMessage(); // CraftBukkit
     }
 
     public EntityPlayer a(NetLoginHandler netloginhandler, String s) {
+        // CraftBukkit start - note: this entire method needs to be changed
+        // Instead of kicking then returning, we need to store the kick reason
+        // in the event, check with plugins to see if it's ok, and THEN kick
+        // depending on the outcome. Also change any reference to this.e.c to entity.world
+        EntityPlayer entity = new EntityPlayer(this.server, this.server.getWorldServer(0), s, new ItemInWorldManager(this.server.getWorldServer(0)));
+        Player player = (entity == null) ? null : (Player) entity.getBukkitEntity();
+        PlayerLoginEvent event = new PlayerLoginEvent(player);
+
+        String s1 = netloginhandler.networkManager.getSocketAddress().toString();
+
+        s1 = s1.substring(s1.indexOf("/") + 1);
+        s1 = s1.substring(0, s1.indexOf(":"));
+
         if (this.banByName.contains(s.trim().toLowerCase())) {
-            netloginhandler.disconnect("You are banned from this server!");
-            return null;
+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, "You are banned from this server!");
+            // return null // CraftBukkit
         } else if (!this.isWhitelisted(s)) {
-            netloginhandler.disconnect("You are not white-listed on this server!");
-            return null;
+            event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST, "You are not white-listed on this server!");
+        } else if (this.banByIP.contains(s1)) {
+            event.disallow(PlayerLoginEvent.Result.KICK_BANNED, "Your IP address is banned from this server!");
+        } else if (this.players.size() >= this.maxPlayers) {
+            event.disallow(PlayerLoginEvent.Result.KICK_FULL, "The server is full!");
         } else {
-            String s1 = netloginhandler.networkManager.getSocketAddress().toString();
-
-            s1 = s1.substring(s1.indexOf("/") + 1);
-            s1 = s1.substring(0, s1.indexOf(":"));
-            if (this.banByIP.contains(s1)) {
-                netloginhandler.disconnect("Your IP address is banned from this server!");
-                return null;
-            } else if (this.players.size() >= this.maxPlayers) {
-                netloginhandler.disconnect("The server is full!");
-                return null;
-            } else {
-                for (int i = 0; i < this.players.size(); ++i) {
-                    EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
-
-                    if (entityplayer.name.equalsIgnoreCase(s)) {
-                        entityplayer.netServerHandler.disconnect("You logged in from another location");
-                    }
-                }
+            event.disallow(PlayerLoginEvent.Result.ALLOWED, s1);
+        }
+
+        this.cserver.getPluginManager().callEvent(event);
+        if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
+            netloginhandler.disconnect(event.getKickMessage());
+            return null;
+        }
+
+        for (int i = 0; i < this.players.size(); ++i) {
+            EntityPlayer entityplayer = (EntityPlayer) this.players.get(i);
 
-                return new EntityPlayer(this.server, this.server.getWorldServer(0), s, new ItemInWorldManager(this.server.getWorldServer(0)));
+            if (entityplayer.name.equalsIgnoreCase(s)) {
+                entityplayer.netServerHandler.disconnect("You logged in from another location");
             }
         }
+
+        return entity;
+        // CraftBukkit end
     }
 
+    // CraftBukkit start
     public EntityPlayer moveToWorld(EntityPlayer entityplayer, int i) {
+        return this.moveToWorld(entityplayer, i, null);
+    }
+
+    public EntityPlayer moveToWorld(EntityPlayer entityplayer, int i, Location location) {
         this.server.getTracker(entityplayer.dimension).untrackPlayer(entityplayer);
-        this.server.getTracker(entityplayer.dimension).untrackEntity(entityplayer);
+        // this.server.getTracker(entityplayer.dimension).untrackEntity(entityplayer); // CraftBukkit
         this.getPlayerManager(entityplayer.dimension).removePlayer(entityplayer);
         this.players.remove(entityplayer);
         this.server.getWorldServer(entityplayer.dimension).removeEntity(entityplayer);
         ChunkCoordinates chunkcoordinates = entityplayer.getBed();
 
-        entityplayer.dimension = i;
-        EntityPlayer entityplayer1 = new EntityPlayer(this.server, this.server.getWorldServer(entityplayer.dimension), entityplayer.name, new ItemInWorldManager(this.server.getWorldServer(entityplayer.dimension)));
+        // CraftBukkit start
+        EntityPlayer entityplayer1 = entityplayer;
+
+        if (location == null) {
+            boolean isBedSpawn = false;
+            CraftWorld cworld = (CraftWorld) this.server.server.getWorld(entityplayer.spawnWorld);
+            if (cworld != null && chunkcoordinates != null) {
+                ChunkCoordinates chunkcoordinates1 = EntityHuman.getBed(cworld.getHandle(), chunkcoordinates);
+                if (chunkcoordinates1 != null) {
+                    isBedSpawn = true;
+                    location = new Location(cworld, chunkcoordinates1.x + 0.5, chunkcoordinates1.y, chunkcoordinates1.z + 0.5);
+                } else {
+                    entityplayer1.netServerHandler.sendPacket(new Packet70Bed(0));
+                }
+            }
 
-        entityplayer1.id = entityplayer.id;
-        entityplayer1.netServerHandler = entityplayer.netServerHandler;
-        WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
+            if (location == null) {
+                cworld = (CraftWorld) this.server.server.getWorlds().get(0);
+                chunkcoordinates = cworld.getHandle().getSpawn();
+                location = new Location(cworld, chunkcoordinates.x + 0.5, chunkcoordinates.y, chunkcoordinates.z + 0.5);
+            }
 
-        if (chunkcoordinates != null) {
-            ChunkCoordinates chunkcoordinates1 = EntityHuman.getBed(this.server.getWorldServer(entityplayer.dimension), chunkcoordinates);
+            Player respawnPlayer = this.cserver.getPlayer(entityplayer);
+            PlayerRespawnEvent respawnEvent = new PlayerRespawnEvent(respawnPlayer, location, isBedSpawn);
+            this.cserver.getPluginManager().callEvent(respawnEvent);
 
-            if (chunkcoordinates1 != null) {
-                entityplayer1.setPositionRotation((double) ((float) chunkcoordinates1.x + 0.5F), (double) ((float) chunkcoordinates1.y + 0.1F), (double) ((float) chunkcoordinates1.z + 0.5F), 0.0F, 0.0F);
-                entityplayer1.a(chunkcoordinates);
-            } else {
-                entityplayer1.netServerHandler.sendPacket(new Packet70Bed(0));
-            }
+            location = respawnEvent.getRespawnLocation();
+            entityplayer.health = 20;
+            entityplayer.fireTicks = 0;
+            entityplayer.fallDistance = 0;
+        } else {
+            location.setWorld(this.server.getWorldServer(i).getWorld());
         }
+        WorldServer worldserver = ((CraftWorld) location.getWorld()).getHandle();
+        entityplayer1.setLocation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+        // CraftBukkit end
 
         worldserver.chunkProviderServer.getChunkAt((int) entityplayer1.locX >> 4, (int) entityplayer1.locZ >> 4);
 
@@ -166,74 +255,63 @@ public class ServerConfigurationManager {
             entityplayer1.setPosition(entityplayer1.locX, entityplayer1.locY + 1.0D, entityplayer1.locZ);
         }
 
-        entityplayer1.netServerHandler.sendPacket(new Packet9Respawn((byte) entityplayer1.dimension));
-        entityplayer1.netServerHandler.a(entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch);
+        // CraftBukkit start
+        byte actualDimension = (byte) (worldserver.getWorld().getEnvironment().getId());
+        entityplayer1.netServerHandler.sendPacket(new Packet9Respawn((byte) (actualDimension >= 0 ? -1 : 0)));
+        entityplayer1.netServerHandler.sendPacket(new Packet9Respawn(actualDimension));
+        entityplayer1.spawnIn(worldserver);
+        entityplayer1.dead = false;
+        entityplayer1.netServerHandler.teleport(new Location(worldserver.getWorld(), entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch));
+        // CraftBukkit end
         this.a(entityplayer1, worldserver);
         this.getPlayerManager(entityplayer1.dimension).addPlayer(entityplayer1);
         worldserver.addEntity(entityplayer1);
         this.players.add(entityplayer1);
-        entityplayer1.syncInventory();
+        this.updateClient(entityplayer1); // CraftBukkit
         entityplayer1.x();
         return entityplayer1;
     }
 
     public void f(EntityPlayer entityplayer) {
-        WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
-        boolean flag = false;
-        byte b0;
-
-        if (entityplayer.dimension == -1) {
-            b0 = 0;
-        } else {
-            b0 = -1;
+        // CraftBukkit start -- Replaced the standard handling of portals with a more customised method.
+        int dimension = entityplayer.dimension;
+        WorldServer fromWorld = this.server.getWorldServer(dimension);
+        WorldServer toWorld = null;
+        if (dimension < 10) {
+            int toDimension = dimension == -1 ? 0 : -1;
+            for (WorldServer world : this.server.worlds) {
+                if (world.dimension == toDimension) {
+                    toWorld = world;
+                }
+            }
         }
+        double blockRatio = dimension == -1 ? 8 : 0.125;
 
-        entityplayer.dimension = b0;
-        WorldServer worldserver1 = this.server.getWorldServer(entityplayer.dimension);
+        Location fromLocation = new Location(fromWorld.getWorld(), entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
+        Location toLocation = toWorld == null ? null : new Location(toWorld.getWorld(), (entityplayer.locX * blockRatio), entityplayer.locY, (entityplayer.locZ * blockRatio), entityplayer.yaw, entityplayer.pitch);
 
-        entityplayer.netServerHandler.sendPacket(new Packet9Respawn((byte) entityplayer.dimension));
-        worldserver.removeEntity(entityplayer);
-        entityplayer.dead = false;
-        double d0 = entityplayer.locX;
-        double d1 = entityplayer.locZ;
-        double d2 = 8.0D;
-
-        if (entityplayer.dimension == -1) {
-            d0 /= d2;
-            d1 /= d2;
-            entityplayer.setPositionRotation(d0, entityplayer.locY, d1, entityplayer.yaw, entityplayer.pitch);
-            if (entityplayer.T()) {
-                worldserver.entityJoinedWorld(entityplayer, false);
-            }
-        } else {
-            d0 *= d2;
-            d1 *= d2;
-            entityplayer.setPositionRotation(d0, entityplayer.locY, d1, entityplayer.yaw, entityplayer.pitch);
-            if (entityplayer.T()) {
-                worldserver.entityJoinedWorld(entityplayer, false);
-            }
+        org.bukkit.craftbukkit.PortalTravelAgent pta = new org.bukkit.craftbukkit.PortalTravelAgent();
+        PlayerPortalEvent event = new PlayerPortalEvent((Player) entityplayer.getBukkitEntity(), fromLocation, toLocation, pta);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled() || event.getTo() == null) {
+            return;
         }
 
-        if (entityplayer.T()) {
-            worldserver1.addEntity(entityplayer);
-            entityplayer.setPositionRotation(d0, entityplayer.locY, d1, entityplayer.yaw, entityplayer.pitch);
-            worldserver1.entityJoinedWorld(entityplayer, false);
-            worldserver1.chunkProviderServer.forceChunkLoad = true;
-            (new PortalTravelAgent()).a(worldserver1, entityplayer);
-            worldserver1.chunkProviderServer.forceChunkLoad = false;
+        Location finalLocation = event.getTo();
+        if (event.useTravelAgent()) {
+            finalLocation = event.getPortalTravelAgent().findOrCreate(finalLocation);
         }
-
-        this.a(entityplayer);
-        entityplayer.netServerHandler.a(entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
-        entityplayer.spawnIn(worldserver1);
-        this.a(entityplayer, worldserver1);
-        this.updateClient(entityplayer);
+        toWorld = ((CraftWorld) finalLocation.getWorld()).getHandle();
+        this.moveToWorld(entityplayer, toWorld.dimension, finalLocation);
+        // CraftBukkit end
     }
 
     public void b() {
-        for (int i = 0; i < this.d.length; ++i) {
-            this.d[i].flush();
+        // CraftBukkit start
+        for (int i = 0; i < this.server.worlds.size(); ++i) {
+            this.server.worlds.get(i).manager.flush();
         }
+        // CraftBukkit end
     }
 
     public void flagDirty(int i, int j, int k, int l) {
@@ -361,11 +439,25 @@ public class ServerConfigurationManager {
     public void e(String s) {
         this.h.add(s.toLowerCase());
         this.l();
+
+        // Craftbukkit start
+        Player player = server.server.getPlayer(s);
+        if (player != null) {
+            player.recalculatePermissions();
+        }
+        // Craftbukkit end
     }
 
     public void f(String s) {
         this.h.remove(s.toLowerCase());
         this.l();
+
+        // Craftbukkit start
+        Player player = server.server.getPlayer(s);
+        if (player != null) {
+            player.recalculatePermissions();
+        }
+        // Craftbukkit end
     }
 
     private void k() {
@@ -380,7 +472,8 @@ public class ServerConfigurationManager {
 
             bufferedreader.close();
         } catch (Exception exception) {
-            a.warning("Failed to load ip ban list: " + exception);
+            // CraftBukkit - corrected text
+            a.warning("Failed to load ops: " + exception);
         }
     }
 
@@ -397,7 +490,8 @@ public class ServerConfigurationManager {
 
             printwriter.close();
         } catch (Exception exception) {
-            a.warning("Failed to save ip ban list: " + exception);
+            // CraftBukkit - corrected text
+            a.warning("Failed to save ops: " + exception);
         }
     }
 
