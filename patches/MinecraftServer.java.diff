diff --git a/original/MinecraftServer.java b/modified/MinecraftServer.java
index c87f3f52..c232801a 100644
--- a/original/MinecraftServer.java
+++ b/modified/MinecraftServer.java
@@ -4,7 +4,6 @@ import java.awt.GraphicsEnvironment;
 import java.io.File;
 import java.io.IOException;
 import java.net.InetAddress;
-import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -14,15 +13,34 @@ import java.util.Random;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+// CraftBukkit start
+import java.io.PrintStream;
+import java.net.UnknownHostException;
+import jline.ConsoleReader;
+import joptsimple.OptionSet;
+import org.bukkit.World.Environment;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.command.ColouredConsoleSender;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.util.ServerShutdownThread;
+import org.bukkit.event.server.ServerCommandEvent;
+import org.bukkit.event.world.WorldInitEvent;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.event.world.WorldSaveEvent;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.PluginLoadOrder;
+// CraftBukkit end
+
 public class MinecraftServer implements Runnable, ICommandListener {
 
     public static Logger log = Logger.getLogger("Minecraft");
     public static HashMap trackerList = new HashMap();
     public NetworkListenThread networkListenThread;
     public PropertyManager propertyManager;
-    public WorldServer[] worldServer;
+    // public WorldServer[] worldServer; // CraftBukkit - removed!
     public ServerConfigurationManager serverConfigurationManager;
-    private ConsoleCommandHandler consoleCommandHandler;
+    public ConsoleCommandHandler consoleCommandHandler; // CraftBukkit - made public
     private boolean isRunning = true;
     public boolean isStopped = false;
     int ticks = 0;
@@ -30,23 +48,48 @@ public class MinecraftServer implements Runnable, ICommandListener {
     public int j;
     private List r = new ArrayList();
     private List s = Collections.synchronizedList(new ArrayList());
-    public EntityTracker[] tracker = new EntityTracker[2];
+    // public EntityTracker[] tracker = new EntityTracker[2]; // CraftBukkit - removed!
     public boolean onlineMode;
     public boolean spawnAnimals;
     public boolean pvpMode;
     public boolean allowFlight;
 
-    public MinecraftServer() {
+    // CraftBukkit start
+    public List<WorldServer> worlds = new ArrayList<WorldServer>();
+    public CraftServer server;
+    public OptionSet options;
+    public ColouredConsoleSender console;
+    public ConsoleReader reader;
+    public static int currentTick;
+    // CraftBukkit end
+
+    public MinecraftServer(OptionSet options) { // CraftBukkit - adds argument OptionSet
         new ThreadSleepForever(this);
+
+        // CraftBukkit start
+        this.options = options;
+        try {
+            this.reader = new ConsoleReader();
+        } catch (IOException ex) {
+            Logger.getLogger(MinecraftServer.class.getName()).log(Level.SEVERE, null, ex);
+        }
+        Runtime.getRuntime().addShutdownHook(new ServerShutdownThread(this));
+        // CraftBukkit end
     }
 
-    private boolean init() {
+    private boolean init() throws UnknownHostException { // CraftBukkit - added throws UnknownHostException
         this.consoleCommandHandler = new ConsoleCommandHandler(this);
         ThreadCommandReader threadcommandreader = new ThreadCommandReader(this);
 
         threadcommandreader.setDaemon(true);
         threadcommandreader.start();
-        ConsoleLogManager.init();
+        ConsoleLogManager.init(this); // CraftBukkit
+
+        // CraftBukkit start
+        System.setOut(new PrintStream(new LoggerOutputStream(log, Level.INFO), true));
+        System.setErr(new PrintStream(new LoggerOutputStream(log, Level.SEVERE), true));
+        // CraftBukkit end
+
         log.info("Starting minecraft server version Beta 1.7.3");
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             log.warning("**** NOT ENOUGH RAM!");
@@ -54,7 +97,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
         }
 
         log.info("Loading properties");
-        this.propertyManager = new PropertyManager(new File("server.properties"));
+        this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         String s = this.propertyManager.getString("server-ip", "");
 
         this.onlineMode = this.propertyManager.getBoolean("online-mode", true);
@@ -64,11 +107,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
         InetAddress inetaddress = null;
 
         if (s.length() > 0) {
-            try {
-                inetaddress = InetAddress.getByName(s);
-            } catch (UnknownHostException e) {
-                throw new RuntimeException(e);
-            }
+            inetaddress = InetAddress.getByName(s);
         }
 
         int i = this.propertyManager.getInt("server-port", 25565);
@@ -77,7 +116,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
 
         try {
             this.networkListenThread = new NetworkListenThread(this, inetaddress, i);
-        } catch (IOException ioexception) {
+        } catch (Throwable ioexception) { // CraftBukkit - IOException -> Throwable
             log.warning("**** FAILED TO BIND TO PORT!");
             log.log(Level.WARNING, "The exception was: " + ioexception.toString());
             log.warning("Perhaps a server is already running on that port?");
@@ -92,8 +131,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
         }
 
         this.serverConfigurationManager = new ServerConfigurationManager(this);
-        this.tracker[0] = new EntityTracker(this, 0);
-        this.tracker[1] = new EntityTracker(this, -1);
+        // CraftBukkit - removed trackers
         long j = System.nanoTime();
         String s1 = this.propertyManager.getString("level-name", "world");
         String s2 = this.propertyManager.getString("level-seed", "");
@@ -109,7 +147,18 @@ public class MinecraftServer implements Runnable, ICommandListener {
 
         log.info("Preparing level \"" + s1 + "\"");
         this.a(new WorldLoaderServer(new File(".")), s1, k);
-        log.info("Done (" + (System.nanoTime() - j) + "ns)! For help, type \"help\" or \"?\"");
+
+        // CraftBukkit start
+        long elapsed = System.nanoTime() - j;
+        String time = String.format("%.3fs", elapsed / 10000000000.0D);
+        log.info("Done (" + time + ")! For help, type \"help\" or \"?\"");
+
+        if (this.propertyManager.properties.containsKey("spawn-protection")) {
+            log.info("'spawn-protection' in server.properties has been moved to 'settings.spawn-radius' in bukkit.yml. I will move your config for you.");
+            this.server.setSpawnRadius(this.propertyManager.getInt("spawn-protection", 16));
+            this.propertyManager.properties.remove("spawn-protection");
+            this.propertyManager.savePropertiesFile();
+        }
         return true;
     }
 
@@ -119,29 +168,74 @@ public class MinecraftServer implements Runnable, ICommandListener {
             convertable.convert(s, new ConvertProgressUpdater(this));
         }
 
-        this.worldServer = new WorldServer[2];
-        ServerNBTManager servernbtmanager = new ServerNBTManager(new File("."), s, true);
+        // CraftBukkit start
+        for (int j = 0; j < (this.propertyManager.getBoolean("allow-nether", true) ? 2 : 1); ++j) {
+            WorldServer world;
+            int dimension = j == 0 ? 0 : -1;
+            String worldType = Environment.getEnvironment(dimension).toString().toLowerCase();
+            String name = (dimension == 0) ? s : s + "_" + worldType;
+
+            ChunkGenerator gen = this.server.getGenerator(name);
 
-        for (int j = 0; j < this.worldServer.length; ++j) {
             if (j == 0) {
-                this.worldServer[j] = new WorldServer(this, servernbtmanager, s, j == 0 ? 0 : -1, i);
+                world = new WorldServer(this, new ServerNBTManager(new File("."), s, true), s, dimension, i, org.bukkit.World.Environment.getEnvironment(dimension), gen); // CraftBukkit
             } else {
-                this.worldServer[j] = new SecondaryWorldServer(this, servernbtmanager, s, j == 0 ? 0 : -1, i, this.worldServer[0]);
+                String dim = "DIM-1";
+
+                File newWorld = new File(new File(name), dim);
+                File oldWorld = new File(new File(s), dim);
+
+                if ((!newWorld.isDirectory()) && (oldWorld.isDirectory())) {
+                    log.info("---- Migration of old " + worldType + " folder required ----");
+                    log.info("Unfortunately due to the way that Minecraft implemented multiworld support in 1.6, Bukkit requires that you move your " + worldType + " folder to a new location in order to operate correctly.");
+                    log.info("We will move this folder for you, but it will mean that you need to move it back should you wish to stop using Bukkit in the future.");
+                    log.info("Attempting to move " + oldWorld + " to " + newWorld + "...");
+
+                    if (newWorld.exists()) {
+                        log.severe("A file or folder already exists at " + newWorld + "!");
+                        log.info("---- Migration of old " + worldType + " folder failed ----");
+                    } else if (newWorld.getParentFile().mkdirs()) {
+                        if (oldWorld.renameTo(newWorld)) {
+                            log.info("Success! To restore the nether in the future, simply move " + newWorld + " to " + oldWorld);
+                            log.info("---- Migration of old " + worldType + " folder complete ----");
+                        } else {
+                            log.severe("Could not move folder " + oldWorld + " to " + newWorld + "!");
+                            log.info("---- Migration of old " + worldType + " folder failed ----");
+                        }
+                    } else {
+                        log.severe("Could not create path for " + newWorld + "!");
+                        log.info("---- Migration of old " + worldType + " folder failed ----");
+                    }
+                }
+
+                world = new SecondaryWorldServer(this, new ServerNBTManager(new File("."), name, true), name, dimension, i, this.worlds.get(0), org.bukkit.World.Environment.getEnvironment(dimension), gen); // CraftBukkit
+            }
+
+            if (gen != null) {
+                world.getWorld().getPopulators().addAll(gen.getDefaultPopulators(world.getWorld()));
             }
 
-            this.worldServer[j].addIWorldAccess(new WorldManager(this, this.worldServer[j]));
-            this.worldServer[j].spawnMonsters = this.propertyManager.getBoolean("spawn-monsters", true) ? 1 : 0;
-            this.worldServer[j].setSpawnFlags(this.propertyManager.getBoolean("spawn-monsters", true), this.spawnAnimals);
-            this.serverConfigurationManager.setPlayerFileData(this.worldServer);
+            this.server.getPluginManager().callEvent(new WorldInitEvent(world.getWorld()));
+
+            world.tracker = new EntityTracker(this, dimension);
+            world.addIWorldAccess(new WorldManager(this, world));
+            world.spawnMonsters = this.propertyManager.getBoolean("spawn-monsters", true) ? 1 : 0;
+            world.setSpawnFlags(this.propertyManager.getBoolean("spawn-monsters", true), this.spawnAnimals);
+            this.worlds.add(world);
+            this.serverConfigurationManager.setPlayerFileData(this.worlds.toArray(new WorldServer[0]));
         }
+        // CraftBukkit end
 
         short short1 = 196;
         long k = System.currentTimeMillis();
 
-        for (int l = 0; l < this.worldServer.length; ++l) {
-            log.info("Preparing start region for level " + l);
-            if (l == 0 || this.propertyManager.getBoolean("allow-nether", true)) {
-                WorldServer worldserver = this.worldServer[l];
+        // CraftBukkit start
+        for (int l = 0; l < this.worlds.size(); ++l) {
+            // if (l == 0 || this.propertyManager.getBoolean("allow-nether", true)) {
+            WorldServer worldserver = this.worlds.get(l);
+            log.info("Preparing start region for level " + l + " (Seed: " + worldserver.getSeed() + ")");
+            if (worldserver.getWorld().getKeepSpawnInMemory()) {
+                // CraftBukkit end
                 ChunkCoordinates chunkcoordinates = worldserver.getSpawn();
 
                 for (int i1 = -short1; i1 <= short1 && this.isRunning; i1 += 16) {
@@ -167,9 +261,15 @@ public class MinecraftServer implements Runnable, ICommandListener {
                         }
                     }
                 }
-            }
+            } // CraftBukkit
         }
 
+        // CraftBukkit start
+        for (World world : this.worlds) {
+            this.server.getPluginManager().callEvent(new WorldLoadEvent(world.getWorld()));
+        }
+        // CraftBukkit end
+
         this.e();
     }
 
@@ -182,32 +282,50 @@ public class MinecraftServer implements Runnable, ICommandListener {
     private void e() {
         this.i = null;
         this.j = 0;
+
+        this.server.enablePlugins(PluginLoadOrder.POSTWORLD); // CraftBukkit
     }
 
-    private void saveChunks() {
+    void saveChunks() { // CraftBukkit - private -> default
         log.info("Saving chunks");
 
-        for (int i = 0; i < this.worldServer.length; ++i) {
-            WorldServer worldserver = this.worldServer[i];
+        // CraftBukkit start
+        for (int i = 0; i < this.worlds.size(); ++i) {
+            WorldServer worldserver = this.worlds.get(i);
 
             worldserver.save(true, (IProgressUpdate) null);
             worldserver.saveLevel();
+
+            WorldSaveEvent event = new WorldSaveEvent(worldserver.getWorld());
+            this.server.getPluginManager().callEvent(event);
         }
+
+        WorldServer world = this.worlds.get(0);
+        if (!world.canSave) {
+            this.serverConfigurationManager.savePlayers();
+        }
+        // CraftBukkit end
     }
 
-    private void stop() {
+    public void stop() { // CraftBukkit - private -> public
         log.info("Stopping server");
+        // CraftBukkit start
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
+        // CraftBukkit end
+
         if (this.serverConfigurationManager != null) {
             this.serverConfigurationManager.savePlayers();
         }
 
-        for (int i = 0; i < this.worldServer.length; ++i) {
-            WorldServer worldserver = this.worldServer[i];
+        // CraftBukkit start - multiworld is handled in saveChunks() already.
+        WorldServer worldserver = this.worlds.get(0);
 
-            if (worldserver != null) {
-                this.saveChunks();
-            }
+        if (worldserver != null) {
+            this.saveChunks();
         }
+        // CraftBukkit end
     }
 
     public void a() {
@@ -235,11 +353,12 @@ public class MinecraftServer implements Runnable, ICommandListener {
 
                     j += l;
                     i = k;
-                    if (this.worldServer[0].everyoneDeeplySleeping()) {
+                    if (this.worlds.get(0).everyoneDeeplySleeping()) { // CraftBukkit
                         this.h();
                         j = 0L;
                     } else {
                         while (j > 50L) {
+                            MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
                             j -= 50L;
                             this.h();
                         }
@@ -306,12 +425,19 @@ public class MinecraftServer implements Runnable, ICommandListener {
         Vec3D.a();
         ++this.ticks;
 
-        for (j = 0; j < this.worldServer.length; ++j) {
-            if (j == 0 || this.propertyManager.getBoolean("allow-nether", true)) {
-                WorldServer worldserver = this.worldServer[j];
+        ((CraftScheduler) this.server.getScheduler()).mainThreadHeartbeat(this.ticks); // CraftBukkit
+
+        for (j = 0; j < this.worlds.size(); ++j) { // CraftBukkit
+            // if (j == 0 || this.propertyManager.getBoolean("allow-nether", true)) { // CraftBukkit
+                WorldServer worldserver = this.worlds.get(j); // CraftBukkit
 
                 if (this.ticks % 20 == 0) {
-                    this.serverConfigurationManager.a(new Packet4UpdateTime(worldserver.getTime()), worldserver.worldProvider.dimension);
+                    // CraftBukkit start - only send timeupdates to the people in that world
+                    for (int i = 0; i < this.serverConfigurationManager.players.size(); ++i) {
+                        EntityPlayer entityplayer = (EntityPlayer) this.serverConfigurationManager.players.get(i);
+                        entityplayer.netServerHandler.sendPacket(new Packet4UpdateTime(entityplayer.getPlayerTime())); // Add support for per player time
+                    }
+                    // CraftBukkit end
                 }
 
                 worldserver.doTick();
@@ -322,14 +448,16 @@ public class MinecraftServer implements Runnable, ICommandListener {
 
                 worldserver.cleanUp();
             }
-        }
+        // } // CraftBukkit
 
         this.networkListenThread.a();
         this.serverConfigurationManager.b();
 
-        for (j = 0; j < this.tracker.length; ++j) {
-            this.tracker[j].updatePlayers();
+        // CraftBukkit start
+        for (j = 0; j < this.worlds.size(); ++j) {
+            this.worlds.get(j).tracker.updatePlayers();
         }
+        // CraftBukkit end
 
         for (j = 0; j < this.r.size(); ++j) {
             ((IUpdatePlayerListBox) this.r.get(j)).a();
@@ -350,7 +478,14 @@ public class MinecraftServer implements Runnable, ICommandListener {
         while (this.s.size() > 0) {
             ServerCommand servercommand = (ServerCommand) this.s.remove(0);
 
-            this.consoleCommandHandler.handle(servercommand);
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(this.console, servercommand.command);
+            this.server.getPluginManager().callEvent(event);
+            servercommand = new ServerCommand(event.getCommand(), servercommand.b);
+            // CraftBukkit end
+
+            // this.consoleCommandHandler.handle(servercommand); // CraftBukkit - Removed its now called in server.dispatchCommand
+            this.server.dispatchCommand(this.console, servercommand); // CraftBukkit
         }
     }
 
@@ -358,15 +493,13 @@ public class MinecraftServer implements Runnable, ICommandListener {
         this.r.add(iupdateplayerlistbox);
     }
 
-    public static void main(String[] astring) {
+    public static void main(final OptionSet options) { // CraftBukkit - replaces main(String args[])
         StatisticList.a();
 
         try {
-            MinecraftServer minecraftserver = new MinecraftServer();
+            MinecraftServer minecraftserver = new MinecraftServer(options); // CraftBukkit - pass in the options
 
-            if (!GraphicsEnvironment.isHeadless() && (astring.length <= 0 || !astring[0].equals("nogui"))) {
-                ServerGUI.a(minecraftserver);
-            }
+            // CraftBukkit - remove gui
 
             (new ThreadServerApplication("Server thread", minecraftserver)).start();
         } catch (Exception exception) {
@@ -391,11 +524,19 @@ public class MinecraftServer implements Runnable, ICommandListener {
     }
 
     public WorldServer getWorldServer(int i) {
-        return i == -1 ? this.worldServer[1] : this.worldServer[0];
+        // CraftBukkit start
+        for (WorldServer world : this.worlds) {
+            if (world.dimension == i) {
+                return world;
+            }
+        }
+
+        return this.worlds.get(0);
+        // CraftBukkit end
     }
 
     public EntityTracker getTracker(int i) {
-        return i == -1 ? this.tracker[1] : this.tracker[0];
+        return this.getWorldServer(i).tracker; // CraftBukkit
     }
 
     public static boolean isRunning(MinecraftServer minecraftserver) {
